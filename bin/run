#!/bin/bash

run_init() {
  direnv allow
}

say_hi() {
  # for testing
  echo "👋 Hi!"
}

create_k3d_cluster() {
  k3d cluster create winterfell \
    --api-port 6550 \
    -p "80:80@loadbalancer" \
    -p "443:443@loadbalancer" \
    --agents 2
}

# applies files matching the pattern in the kubernetes-files directory
apply_matching_files() {
  local pattern=$1
  find "./kubernetes-files" -type f -wholename "*$pattern" | sort | while read -r file; do
    echo "Applying $file..."
    # run kubectl apply and capture both output and status
    if output=$(kubectl apply -f "$file"); then
      echo "$output"
      if echo "$output" | grep -q "unchanged"; then
        echo "✅ No changes needed for $file"
      else
        echo "✅ Successfully applied changes to $file"
        sleep 2
      fi
    else
      echo "$output"
      echo "❌ Failed to apply $file"
      exit 1
    fi
    echo ""
  done
}

k8s_apply() {
  local prefix=$1
  local search_base=""

  if [ -n "$prefix" ]; then
    search_base="$prefix/"
  fi

  # only apply Traefik CRD if no prefix specified
  if [ -z "$prefix" ]; then
    kubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v2.10/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml
  fi

  # first, create all namespaces
  echo "🔷 Creating namespaces..."
  apply_matching_files "${search_base}*namespace.yaml"

  # then create PVCs
  echo "🔷 Creating PVCs..."
  apply_matching_files "${search_base}*pvc.yaml"

  # create secrets and config maps
  echo "🔷 Creating secrets and configmaps..."
  apply_matching_files "${search_base}*secret.yaml"
  apply_matching_files "${search_base}*configmap.yaml"
  apply_matching_files "${search_base}*config*.yaml"

  # create service accounts and RBAC resources
  echo "🔷 Creating RBAC resources..."
  apply_matching_files "${search_base}*serviceaccount.yaml"
  apply_matching_files "${search_base}*role*.yaml"
  apply_matching_files "${search_base}*cluster-role*.yaml"
  apply_matching_files "${search_base}*rbac*.yaml"

  # create services
  echo "🔷 Creating services..."
  apply_matching_files "${search_base}*service.yaml"

  # create middleware (Traefik)
  echo "🔷 Creating middleware..."
  apply_matching_files "${search_base}*middleware.yaml"

  # create daemonsets
  echo "🔷 Creating daemonsets..."
  apply_matching_files "${search_base}*daemonset.yaml"

  # create deployments
  echo "🔷 Creating deployments..."
  apply_matching_files "${search_base}*deployment.yaml"

  # finally, create ingress rules
  echo "🔷 Creating ingress rules..."
  apply_matching_files "${search_base}*ingress.yaml"

  # only create dashboard token if no prefix specified
  if [ -z "$prefix" ]; then
    echo "🔷 Creating dashboard token..."
    token=$(kubectl -n kubernetes-dashboard create token admin-user)
    echo "🔵 Dashboard token (also saved to tmp/k3d-k8s-dashboard.token):"
    echo "$token"
    mkdir -p tmp
    echo "$token" >tmp/k3d-k8s-dashboard.token
  fi

  echo "✨ All kubernetes resources have been applied!"
}

restart_prometheus() {
  # restarting it directly would lead to crash loop backoff with error `opening storage failed: lock DB directory: resource temporarily unavailable`, so we've to re-create the pvc
  timeout 3 kubectl delete pvc prometheus-pvc -n winterfell-o11y || true
  sleep 3
  kubectl patch pvc prometheus-pvc -p '{"metadata":{"finalizers":null}}' -n winterfell-o11y
  kubectl apply -f kubernetes-files/o11y/prometheus/prometheus-pvc.yaml
  kubectl rollout restart deployment prometheus -n winterfell-o11y
}

recreate_grafana() {
  timeout 3 kubectl delete pvc grafana-pvc -n winterfell-o11y || true
  sleep 3
  kubectl patch pvc grafana-pvc -p '{"metadata":{"finalizers":null}}' -n winterfell-o11y
  kubectl apply -f kubernetes-files/o11y/grafana/grafana-pvc.yaml
  kubectl rollout restart deployment grafana -n winterfell-o11y
}

destroy_k3d_cluster() {
  k3d cluster delete winterfell
}

fn_exists() { declare -F "$1" >/dev/null; }

run() {
  local cmd=$1
  shift
  local fn="run_$cmd"

  if fn_exists $fn; then
    $fn ${@}
  else
    # with_dev_env
    eval $cmd "${@}"
  fi
}

run ${@}
